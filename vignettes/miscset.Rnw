%\VignetteIndexEntry{User Manual}
%\VignettePackage{miscset}
%\VignetteKeywords{misc}
%\VignetteEngine{knitr::knitr}

\documentclass[a4paper]{article}
\usepackage[top=100pt,bottom=60pt,left=75pt,right=60pt]{geometry}
\usepackage[colorlinks=true,linkcolor=black,urlcolor=blue]{hyperref}
\title{R Package \texttt{miscset} \protect\\ User Manual}
\author{Sven E. Templer\\\texttt{sven.templer@gmail.com}}

\begin{document}
%\SweaveOpts{concordance=TRUE}

<<include=FALSE, echo=FALSE>>=
require(knitr)
opts_chunk$set(concordance=TRUE)
@

\maketitle
\tableofcontents
\newpage

\section{Introduction}

\textbf{miscset}\\

A \href{http://r-project.org}{GNU R} package with miscellaneous tools.\\

The package contains methods to simplify workspace handling, sort, reshape and apply functions on grids of data.frames, scale numeric values, extract unique and duplicate values, perform regular expression based string operations and ease plotting. Many methods are implemented with multi-core support from the parallel package or written in C++ interfaced with the Rcpp library.\\

\section{Installation \& Development}

You can install the package to use it in any \texttt{R} session. The stable versions are published on the comprehensive R archive network (CRAN) servers. The web description of this and previous versions can be found on the page \href{http://http://cran.r-project.org/web/packages/miscset/}{cran.r-project.org/web/packages/miscset}. The installation takes place in an \texttt{R} session or script. Run the code:

<<eval=FALSE>>=
install.packages("miscset")
@

A more administrative way is to use the command line in a shell environment and install the package from a downloaded \texttt{.tar.gz} archive. Invoking \texttt{R} from the shell provides the syntax \texttt{R CMD INSTALL /path/to/package.tar.gz} therefore.\\

The most recent version can be found on \href{http://github.com/setempler/miscset}{github.com/setempler/miscset}. With the \texttt{devtools} package, it is easy to install it:

<<eval=FALSE>>=
install.packages("devtools")
library(devtools)
install_github(repo='setempler/miscset')
@

Once installed, you need to load the package into the current session to access the functions and help pages. With the functions \texttt{library} or \texttt{require} you perform this step:

<<message=TRUE, warning=TRUE>>=
library(miscset)
@

In the following sections the usage of the functions is shown with example data and the output. Each function is accomanied by a help page, which is typically invoked on the \texttt{R} shell with \texttt{?} in front of the function's name.

\section{Numeric Functions}

\subsection{Generate triangular numbers - \texttt{ntri}}

The function generates a series of triangular numbers of length \texttt{n} according to \href{https://oeis.org/A000217}{oeis.org/A000217}. The series for 12 rows of a triangle, for example, can be returned as in the following example:

<<>>=
ntri(12)
@

The function takes one argument \texttt{n} as in the syntax \texttt{ntri(n)}, which can be a positive integer value for the length of the sequence.

\subsection{Scale numeric vectors - \texttt{scale0, scaler}}

The function \texttt{scale0} scales all values in a numeric vector from 0 to 1 according to their minimum and maximum values. It allows numeric vector input for the argument \texttt{x} as in it's usage:\\ 

\texttt{scale0(x)}\\

By it's default argument, \texttt{scaler} behaves the same as \texttt{scale0}. It offers two more arguments to modify the range (\texttt{r}) of the output and borders (\texttt{b}) of the input as in:\\

\texttt{scaler(x, r = c(0, 1), b = range(x, na.rm = TRUE))}\\

See the following examples for the effect:

<<>>=
scale0(0:5)
scale0(-2:3)
scaler(0:5)
scaler(0:5, r = c(1, 9.9))
scaler(0:5, b = c(0, 10))
@

\subsection{p values to symbol (***) converting - \texttt{p2star}}

The function \texttt{p2star} converts numeric values to character symbol representing the range in which the value resides. This feature is provided in \texttt{R} by the function \texttt{symnum}. The default settings in \texttt{p2star} are setting breaks for the ranges useful to convert p-values from statistical tests to significance indicators:\\

\texttt{p2star(p, breaks = c(0, 0.001, 0.01, 0.05, 0.1, 1), symbols = c("***", "**", "*", ".", "n.s."))}\\

The argument \texttt{symbols} can be modified to change the output symbols. The two lowest values in \texttt{breaks} define the range for the first value in \texttt{symbol}. See the following example:

<<>>==
p2star(c(1e-5,.1,.9))
@

\section{Data Manipulation}

\subsection{Sort a data frame - \texttt{sort}}

The base function \texttt{sort} provides a way to sort data vectors in increasing or decreasing order. Despite being implemented as S3 generic, it does not contain a lot of methods specific for special data types. Therefore, to sort data arranged in a \texttt{data.frame} class object, one needs to use the \texttt{order} function, and create complex function calls, for example:

<<>>==
d <- data.frame(a=c(1,1,1,2,NA),b=c(2,1,3,1,1),c=5:1)
d
# classical ordering of data.frame objects
d[order(d$b, d$c),]
@

In the package \texttt{miscset} the method for this class is implemented (as \texttt{sort.data.frame}) and can be called with the generic name on \texttt{data.frame} objects. The order and set of the columns to sort by can be provided as character vector or expression with the \texttt{by} or \texttt{bye} arguments. Increasing or decreasing order can be chosen with the \texttt{decreasing} argument (right now only one direction is possible for all chosen columns.)

<<>>==
# sort by every column, decreasing, dropping missing value rows
sort(d, decreasing = TRUE)
# ... by column 'c'
sort(d, by="c")
# ... by columns 'a' and then 'c'
sort(d, bye=.(a,c))
@

Rows with missing values, if present in one of the columns to sort by, will be dropped with the default setting of the argument \texttt{na.last = NA}. To keep rows with missing values on top or bottom of the \texttt{data.frame}, use \texttt{FALSE} or \texttt{TRUE} as value for the argument, respectively.

\subsection{Row-bind data.frames - \texttt{do.rbind}}

Attaching \texttt{data.frame} objects row wise, the \texttt{rbind} function can be combined with \texttt{do.call} on a list of tables: \texttt{do.call(list(d, d))}.

\subsection{Duplicates and unique values - \texttt{duplicates, duplicatei, uniquei, nunique}}

...

\subsection{Create a factor containing missing values as level - \texttt{factorNA}}

...

\subsection{Transform to squared matrix - \texttt{squarematrix}}

The function \texttt{squarematrix} can generate a symmetric (square) matrix from an unsymmetric matrix by using the column and row names and filling empty pairs with \texttt{NA}.

<<>>=
M <- matrix(1:6, 2, dimnames = list(2:3,1:3))
M
squarematrix(M)
@

\subsection{Generate a pairwise list - \texttt{enpaire}}

The function \texttt{enpaire} creates a pairwise list of matrix values. The result is a \texttt{data.frame} that containsa column for the names of each dimension and the upper and lower triangle values. Unsymmetric matrices are transformed by \texttt{squarematrix} (see previous section).

<<>>=
M <- matrix(letters[1:9], 3, 3, dimnames = list(1:3,1:3))
M
enpaire(M)
@

\subsection{Create a latex document containing a table - \texttt{textable}}

This function enhances the functionality of the \texttt{xtable} function from the similar named package. The output of \texttt{xtable} is captured, processed and then written to a file. The file may contain also latex header for an A4 portrait or landscape article. The function is called with the following syntax: \texttt{textable(d, file, caption = NULL, label = NULL, align = NULL, rownames = FALSE, topcapt = TRUE, digits = NULL, as.document = FALSE, landscape = FALSE, margin = 2, pt.size = 10, cmd = NULL)
}

\texttt{file} is a character string with the name to the file of the function output. \texttt{caption} is a character string with the table's title. It is aligned to the top of the table, when \texttt{topcapt} is \texttt{TRUE}, otherwise to the table bottom. \texttt{rownames} is logical and allows to switch printing of row names on and off. when \texttt{as.document} is \texttt{TRUE}, a document header is added. Then, \texttt{landscape} defines the orientation of the page, \texttt{pt.size} the size of the characters and \texttt{margin} the table borders in cm. \texttt{digits} sets the number of digits to print for numeric values. With \texttt{align} the column alignements can be set. It is either one of \texttt{'r', 'c', 'l'}, or a vector of those elements for alignemt to the right, center or left, repsectively (use \texttt{rep()} or \texttt{strplit()} as support). \texttt{label} allows to supply a latex label for reference in form of a vector of length one.

<<>>==
textable(head(trees,3), rownames = TRUE, digits=4, align=strsplit("llrr","")[[1]], 
         as.document = TRUE, label='tab:trees', caption='R dataset "trees".')
@

In addition, a system command can be provided as a character string with \texttt{cmd} to create a pdf for example. An example therefore might be \texttt{cmd = "pdflatex"}.

\section{Workspace and System}

\subsection{List details from and remove all objects - \texttt{lsall, rmall}}

With \texttt{lsall(envir, ...)} all object names, their length, class, mode and size is returned in a data.frame from a specified environment. \texttt{rmall(...)} removes the complete list of objects at the global environment.

<<>>=
lsall()
rmall()
lsall()
@

\subsection{Load objects from R data files into a list - \texttt{lload}}

\texttt{lload} provides a way to load R objects from multiple R data files and stores all objects in a list. Thereby, the list names are respective to the R data files. Each entry consists of a sublist with as many entries as objects were loaded from the according R data file. The sublist names are the same as the object names that are stored. If \texttt{simplify=TRUE} is given, all object (sublist) names are checked for duplicates, and if none are found, the list is reduced in one level, dropping the file level.

\subsection{Quickly view package (help) index - \texttt{help.index}}

...

\section{Strings and Patterns}

\subsection{Prepend zeroes to unify number lengths - \texttt{leading0}}

The function \texttt{leading0} aims to create e.g. index names with a common string length. It creates character strings from numeric values while attaching \texttt{0} in front of the number up to a certain length of total digits of each string.

<<>>=
paste0("page", leading0(8:10, 3))
@

\subsection{Extract substrings by pattern - \texttt{strextr}}

The function \texttt{strextr} splits strings in a character vector by \texttt{sep} and extracts all substrings matching a given \texttt{pattern}.

<<>>=
s <- c("a1 b1 c1", "a2 b2", "aa a1", "aa", "b1 a1", "bb ab a1")
strextr(s, "^[ab][[:digit:]]$")
strextr(s, "^[ab][[:digit:]]$", mult = T)
strextr(s, "^[ab][[:digit:]]$", mult = T, unlist = T)
strextr(s, "^[c][[:digit:]]$")
@

\subsection{Extract substrings by splitting - \texttt{strpart}}

Similar to \texttt{strextr} the function \texttt{strpart} supplies a method to extract a substring, but by defining the \texttt{n}th part of the string split by the separator given in \texttt{sep}.

<<>>=
s
strpart(s, " ", 2)
@

\subsection{Reverse strings - \texttt{strrev}}

With \texttt{strrev} you can create the reversed version of strings.

<<>>=
strrev(c("olleH", "!dlroW"))
@

\subsection{Multiple pattern replacement - \texttt{msub, mgsub}}

\texttt{msub} and \texttt{mgsub} behave like \texttt{sub} and \texttt{gsub} but they replace multiple patterns. Replacement is done in order of the pattern input, and multicore support is enabled by \texttt{mclapply} from the parallel package.

<<>>=
s
msub("A", "X", s)
mgsub("A", "X", s)
@

\subsection{Get index of expression - \texttt{gregexprind}}

<<>>=
s
gregexprind("a", s, 1)
gregexprind("a", s, 2)
gregexprind("a", s, "last")
@

\subsection{Multiple pattern search - \texttt{mgrepl}}

With \texttt{mgrepl(patterns, text, ...)} you can search for more than one regular expression, and use a logical function to combine the results for each single expression. It returns a logical vector, or when \texttt{use.which = TRUE} an integer vector with the indices as in the base function \texttt{which}.

<<>>=
s
mgrepl(c("a","b"), s, any)
mgrepl(c("a","b"), s, all)
mgrepl(c("a","b"), s, all, use.which = TRUE)
@



\section{Graphics}

\subsection{Create a color palette - \texttt{gghcl}}

\texttt{gghcl()} creates color palettes. It enhances the \texttt{hcl} function. See some examples:

<<label=fig_gghcl, echo=FALSE, fig.width=6, fig.height=3, fig.align='center'>>=
par(mfrow = c(1,3), mai = c(.1,.5,.5,.1))
image(matrix(1:5, 1), col = gghcl(5), axes = F, main ="gghcl(5)")
image(matrix(1:10, 1), col = gghcl(10), axes = F, main = "gghcl(10)")
image(matrix(1:5, 1), col = gghcl(10, 1:5), axes = F, main ="gghcl(10, 1:5)")
@

\subsection{Arrange a list of ggplots in a grid - \texttt{ggplotGrid, ggplotGridA4}}

\texttt{ggplotGrid} arranges your \texttt{ggplot} objects in a grid and optionally sends them to a graphics device such as \texttt{pdf/ps/svg/png/eps} for export to a file.

<<label=fig_ggplotgrid, eval=TRUE, fig.width=6, fig.height=3, fig.align='center'>>=
library(ggplot2)
d <- data.frame(a=1:5, b=1:5)
gg1 <- ggplot(d, aes(x=a, y=b)) + geom_line()
gg2 <- ggplot(d, aes(x=a, y=b)) + geom_point()
ggplotGrid(list(gg1, gg2), ncol = 2)
@

\subsection{Create an empty plot - \texttt{plotn}}

To produce nothing but a plot, use \texttt{plotn}:

<<label=fig_plotn, eval=TRUE, fig.width=3, fig.height=3, fig.align='center'>>=
plotn(1)
abline(0,1)
@

\section{Deprecated}

\subsection{Arrange a list of ggplots in a grid - \texttt{ggplotlist}}

The function \texttt{ggplotlist} is deprecated and will be dropped in future releases. Please use \texttt{ggplotGrid} as replacement.

\end{document}
