%\VignetteIndexEntry{User Manual}
%\VignettePackage{miscset}
%\VignetteKeywords{misc}
%\VignetteEngine{knitr::knitr}

\documentclass[a4paper]{article}
\usepackage[top=100pt,bottom=60pt,left=75pt,right=60pt]{geometry}
\usepackage[colorlinks=true,linkcolor=black,urlcolor=blue]{hyperref}
\title{R Package \texttt{miscset} \protect\\ User Manual}
\author{Sven E. Templer\\\texttt{sven.templer@gmail.com}}

\begin{document}
%\SweaveOpts{concordance=TRUE}

<<include=FALSE, echo=FALSE>>=
require(knitr)
opts_chunk$set(concordance=TRUE)
@

\maketitle
\tableofcontents


\part{Preface}

\section{Introduction}

The package \textbf{miscset} provides several R tools to read, create, modify and write different types of data. In the following examples, all available functions will be presented including explanations of their usage. Find the source code online at \href{http://github.com/setempler/miscset}{github}.

\section{Installation}

To install the package call the command \texttt{install.packages("miscset")} within the R console or run \texttt{R CMD INSTALL miscset} from a terminal. To use it the \texttt{library} or \texttt{require} function load the package. For the most recent version use: \texttt{install\_github(repo='setempler/miscset')} from the package \texttt{devtools}.

<<>>=
require(miscset)
@

\part{Functions}

\section{Numeric Functions}

\subsection{Generate triangular numbers - \texttt{ntri}}

The function generates a series of triangular numbers of length \texttt{n} according to \href{https://oeis.org/A000217}{oeis.org}.

<<>>=
ntri(12)
@

\subsection{Scale numeric vectors - \texttt{scale0, scaler}}

The function \texttt{scale0} scales all values in a numeric vector from 0 to 1 according to their minimum and maximum values. \texttt{scaler} provides an argument (\texttt{r}) which lets you set the range to scale a vector to. Additionally, the minimum and maximum border can be specified with the argument \texttt{b}, so that vectors with different ranges can be compared on the same scale.

<<>>=
do.call(rbind, list(
  scale0 = scale0(0:5),
  scale0_shift = scale0(-2:3),
  scaler = scaler(0:5),
  scaler_newrange = scaler(0:5, r = 1:2),
  scaler_newbord = scaler(0:5, b = c(0, 10))))
@




\section{Data and System}

\subsection{Apply a function on a data.frame by a grid - \texttt{gapply}}

To apply a function on a subset of a dataset, all named columns are used to create a grid for which each unique combination is used to extract the rows in the \texttt{data.frame}. Multicore support is implemented by \texttt{mclapply}. The grid can be extracted by the function \texttt{levels} and a row binding of elements that can be coerced to data.frames is implemented in the method \texttt{as.data.frame}. If a \texttt{data.table} is preferred, the method \texttt{as.data.table} is implemented and works only if the package is installed.

<<>>==
f <- function (x) c(conc.diff = diff(range(x$conc)), uptake.sum=sum(x$uptake))
d <- gapply(CO2, c('Type', 'Treatment'), f)
levels(d)
head(as.data.frame(d))
@

\subsection{Transform to squared matrix - \texttt{squarematrix}}

The function \texttt{squarematrix} can generate a symmetric (square) matrix from an unsymmetric matrix by using the column and row names and filling empty pairs with \texttt{NA}.

<<>>=
M <- matrix(1:6, 2, dimnames = list(2:3,1:3))
M
squarematrix(M)
@

\subsection{Generate a pairwise list - \texttt{enpaire}}

The function \texttt{enpaire} creates a pairwise list of matrix values. The result is a \texttt{data.frame} that containsa column for the names of each dimension and the upper and lower triangle values. Unsymmetric matrices are transformed by \texttt{squarematrix} (see previous section).

<<>>=
M <- matrix(letters[1:9], 3, 3, dimnames = list(1:3,1:3))
M
enpaire(M)
@

\subsection{Create a latex document containing a table - \texttt{textable}}

This function enhances the functionality of the \texttt{xtable} function from the similar named package. The output of \texttt{xtable} is captured, processed and then written to a file. The file may contain also latex header for an A4 portrait or landscape article. The function is called with the following syntax: \texttt{textable(d, file, caption = NULL, label = NULL, align = NULL, rownames = FALSE, topcapt = TRUE, digits = NULL, as.document = FALSE, landscape = FALSE, margin = 2, pt.size = 10, cmd = NULL)
}

\texttt{file} is a character string with the name to the file of the function output. \texttt{caption} is a character string with the table's title. It is aligned to the top of the table, when \texttt{topcapt} is \texttt{TRUE}, otherwise to the table bottom. \texttt{rownames} is logical and allows to switch printing of row names on and off. when \texttt{as.document} is \texttt{TRUE}, a document header is added. Then, \texttt{landscape} defines the orientation of the page, \texttt{pt.size} the size of the characters and \texttt{margin} the table borders in cm. \texttt{digits} sets the number of digits to print for numeric values. With \texttt{align} the column alignements can be set. It is either one of \texttt{'r', 'c', 'l'}, or a vector of those elements for alignemt to the right, center or left, repsectively (use \texttt{rep()} or \texttt{strplit()} as support). \texttt{label} allows to supply a latex label for reference in form of a vector of length one.

<<>>==
textable(head(trees,3), rownames=T, digits=4, align=strsplit("llrr","")[[1]], 
         label='tab:trees', caption='R dataset "trees".')
@

In addition, a system command can be provided as a character string with \texttt{cmd} to create a pdf for example. An example therefore might be \texttt{cmd = "pdflatex"}.

\subsection{List details from and remove all objects - \texttt{lsall},
\texttt{rmall}}

With \texttt{lsall(envir, ...)} all object names, their length, class, mode and size is returned in a data.frame from a specified environment. \texttt{rmall(...)} removes the complete list of objects at the global environment.

<<>>=
lsall()
rmall()
lsall()
@

\subsection{Load objects from R data files into a list - \texttt{lload}}

\texttt{lload} provides a way to load R objects from multiple R data files and stores all objects in a list. Thereby, the list names are respective to the R data files. Each entry consists of a sublist with as many entries as objects were loaded from the according R data file. The sublist names are the same as the object names that are stored. If \texttt{simplify=TRUE} is given, all object (sublist) names are checked for duplicates, and if none are found, the list is reduced in one level, dropping the file level.



\section{Strings and Patterns}

\subsection{Prepend zeroes to unify number lengths - \texttt{leading0}}

The function \texttt{leading0} aims to create e.g. index names with a common string length. It creates character strings from numeric values while attaching \texttt{0} in front of the number up to a certain length of total digits of each string.

<<>>=
paste0("page", leading0(8:10, 3))
@

\subsection{Extract substrings by pattern - \texttt{strextr}}

The function \texttt{strextr} splits strings in a character vector by \texttt{sep} and extracts all substrings matching a given \texttt{pattern}.

<<>>=
s <- c("a1 b1 c1", "a2 b2", "aa a1", "aa", "b1 a1", "bb ab a1")
strextr(s, "^[ab][[:digit:]]$")
strextr(s, "^[ab][[:digit:]]$", mult = T)
strextr(s, "^[ab][[:digit:]]$", mult = T, unlist = T)
strextr(s, "^[c][[:digit:]]$")
@

\subsection{Extract substrings by splitting - \texttt{strpart}}

Similar to \texttt{strextr} the function \texttt{strpart} supplies a method to extract a substring, but by defining the \texttt{n}th part of the string split by the separator given in \texttt{sep}.

<<>>=
s
strpart(s, " ", 2)
@

\subsection{Reverse strings - \texttt{strrev}}

With \texttt{strrev} you can create the reversed version of strings.

<<>>=
strrev('!dlroW olleH')
s
strrev(s)
@

\subsection{Multiple pattern replacement - \texttt{msub}, \texttt{mgsub}}

\texttt{msub} and \texttt{mgsub} behave like \texttt{sub} and \texttt{gsub} but they replace multiple patterns. Replacement is done in order of the pattern input, and multicore support is enabled by \texttt{mclapply} from the parallel package.

<<>>=
s
msub("A", "X", s)
mgsub("A", "X", s)
@

\subsection{Get index of expression - \texttt{gregexprind}}

<<>>=
s
gregexprind("a", s, 1)
gregexprind("a", s, 2)
gregexprind("a", s, "last")
@

\subsection{Multiple pattern search - \texttt{mgrepl}}

With \texttt{mgrepl(patterns, text, ...)} you can search for more than one regular expression, and use a logical function to combine the results for each single expression. It returns a logical vector, or when \texttt{use.which = TRUE} an integer vector with the indices as in the base function \texttt{which}.

<<>>=
s
mgrepl(c("a","b"), s, any)
mgrepl(c("a","b"), s, all)
mgrepl(c("a","b"), s, all, use.which = TRUE)
@



\section{Graphics}

\subsection{Create a color palette - \texttt{gghcl}}

\texttt{gghcl()} creates color palettes. It enhances the \texttt{hcl} function. See some examples:

<<label=fig_gghcl, echo=FALSE, fig.width=6, fig.height=3, fig.align='center'>>=
par(mfrow = c(1,3), mai = c(.1,.5,.5,.1))
image(matrix(1:5, 1), col = gghcl(5), axes = F, main ="gghcl(5)")
image(matrix(1:10, 1), col = gghcl(10), axes = F, main = "gghcl(10)")
image(matrix(1:5, 1), col = gghcl(10, 1:5), axes = F, main ="gghcl(10, 1:5)")
@

\subsection{Arrange a list of ggplots in a grid - \texttt{ggplotGrid, ggplotGridA4}}

\texttt{ggplotGrid} arranges your \texttt{ggplot} objects in a grid and optionally sends them to a graphics device such as \texttt{pdf/ps/svg/png/eps} for export to a file.

<<label=fig_ggplotgrid, eval=TRUE, fig.width=6, fig.height=3, fig.align='center'>>=
library(ggplot2)
d <- data.frame(a=1:5, b=1:5)
gg1 <- ggplot(d, aes(x=a, y=b)) + geom_line()
gg2 <- ggplot(d, aes(x=a, y=b)) + geom_point()
ggplotGrid(list(gg1, gg2), ncol = 2)
@

\subsection{Create an empty plot - \texttt{plotn}}

To produce nothing but a plot, use \texttt{plotn}:

<<label=fig_plotn, eval=TRUE, fig.width=3, fig.height=3, fig.align='center'>>=
plotn(1)
abline(0,1)
@

\section{Deprecated}

\subsection{Arrange a list of ggplots in a grid - \texttt{ggplotlist}}

The function \texttt{ggplotlist} is deprecated and will be dropped in future releases. Please use \texttt{ggplotGrid} as replacement.

\end{document}
