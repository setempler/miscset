%\VignetteIndexEntry{User Manual}
%\VignettePackage{miscset}
%\VignetteKeywords{misc}
%\VignetteEngine{knitr::knitr}

\documentclass[a4paper]{article}
\usepackage[top=100pt,bottom=60pt,left=75pt,right=60pt]{geometry}
\usepackage[colorlinks=true,linkcolor=black,urlcolor=blue]{hyperref}
\title{R Package \texttt{miscset} \protect\\ User Manual}
\author{Sven E. Templer\\\texttt{sven.templer@gmail.com}}

\begin{document}
%\SweaveOpts{concordance=TRUE}

<<include=FALSE, echo=FALSE>>=
require(knitr)
opts_chunk$set(concordance=TRUE)
@

\maketitle
\tableofcontents
\newpage

\part{Preface}

\section{Introduction}

The package \textbf{miscset} provides several R tools to read, create, modify
and write different types of data. In the following examples, all available
functions will be presented including explanations of their usage. Find the
source code online at \href{http://github.com/svenetempler/miscset}{github}.

\section{Installation}

To install the package call the command \texttt{install.packages("miscset")}
within the R console or run \texttt{R CMD install miscset} from a terminal.
To use it the \texttt{library} or \texttt{require} function load the package.
For the most recent version use \texttt{install\_github} from the package
\texttt{devtools} with the parameters \texttt{repo='svenetempler/miscset'}.

<<>>=
require(miscset)
@

\part{Functions}

\section{Apply Functions}

\subsection{Apply a function on a data.frame by a grid - \texttt{gapply}}

To apply a function on a subset of a dataset, all named columns are used
to create a grid for which each unique combination is used to extract the
rows in the \texttt{data.frame}. Multicore support is implemented by
\texttt{mclapply}. The grid can be extracted by the function \texttt{levels}
and a row binding of elements that can be coerced to data.frames is implemented
in the method \texttt{as.data.frame}.

<<>>==
f <- function (x) c(conc.diff = diff(range(x$conc)), uptake.sum=sum(x$uptake))
d <- gapply(CO2, c('Type', 'Treatment'), f)
levels(d)
head(as.data.frame(d))
@

\section{Numeric Functions}

\subsection{Generate triangular numbers - \texttt{ntri}}

The function generates a series of triangular numbers of length \texttt{n}
according to \href{https://oeis.org/A000217}{oeis.org}.

<<>>=
ntri(12)
@

\subsection{Scale numeric vectors - \texttt{scale0}}

The function scales all values in a numeric vector from 0 to 1.

<<>>=
scale0(0:10)
scale0(-1:3)
scale0(2:3)
@

\section{Data Formatting}

\subsection{Transform to squared matrix - \texttt{squarematrix}}

The function \texttt{squarematrix} can generate a symmetric (square) matrix
from an unsymmetric matrix by using the column and row names and filling empty
pairs with \texttt{NA}.

<<>>=
M <- matrix(1:6, 2, dimnames = list(2:3,1:3))
M
squarematrix(M)
@

\subsection{Generate a pairwise list - \texttt{enpaire}}

The function \texttt{enpaire} creates a pairwise list of matrix values. The result
is a \texttt{data.frame} that containsa column for the names of each dimension and
the upper and lower triangle values. Unsymmetric matrices are transformed by
\texttt{squarematrix} (see previous section).

<<>>=
M <- matrix(letters[1:9], 3, 3, dimnames = list(1:3,1:3))
M
enpaire(M)
@

\section{Data Exporting}

\subsection{Create a latex document containing a table - \texttt{textable}}

This function enhances the functionality of the \texttt{xtable} function from
the similar named package. The output of \texttt{xtable} is captured, processed
and then written to a file. The file contains also latex header for an A4
portrait or landscape article. The function is called with the following
syntax: \texttt{textable(d, file, caption, rownames, landscape, pt.size,
margin, digits, align, label)}

\texttt{file} is a character string with the name to the file of the function
output. \texttt{caption} is a character string with the table's title.
\texttt{rownames} is logical and allows to switch printing of row names on
and off. \texttt{landscape} is logical for the orientation of the page,
\texttt{pt.size} uses an integer value to define the size of the characters.
\texttt{margin} sets a margin between page and table borders in cm.
\texttt{digits} defines the number of digits to print for numeric values.
With \texttt{align} the column alignements can be set. Either a single value
or a value for the row names column plus each column in \texttt{d}.
The possible values are \texttt{'r', 'c', 'l'} for alignemt to the right,
center or left.

<<>>==
textable(head(trees,3), rownames=T, digits=4, align='c', caption='R dataset "trees".')
@

\section{Text String Manipulation}

\subsection{Prepend zeroes to unify number lengths - \texttt{leading0}}

The function \texttt{leading0} aims to create e.g. index names with a common
string length. It creates character strings from numeric values while attaching
\texttt{0} in front of the number up to a certain length of total digits of
each string.

<<>>=
paste0("page", leading0(8:10, 3))
@

\subsection{Extract substrings by pattern - \texttt{strextr}}

The function \texttt{strextr} splits strings in a character vector by
\texttt{sep} and extracts all substrings matching a given \texttt{pattern}.

<<>>=
s <- c("a1 b1 c1", "a2 b2", "aa a1", "aa", "b1 a1", "bb ab a1")
strextr(s, "^[ab][[:digit:]]$")
strextr(s, "^[ab][[:digit:]]$", mult = T)
strextr(s, "^[ab][[:digit:]]$", mult = T, unlist = T)
strextr(s, "^[c][[:digit:]]$")
@

\subsection{Extract substrings by splitting - \texttt{strpart}}

Similar to \texttt{strextr} the function \texttt{strpart} supplies a method to
extract a substring, but by defining the \texttt{n}th part of the string split
by the separator given in \texttt{sep}.

<<>>=
s
strpart(s, " ", 2)
@

\subsection{Reverse strings - \texttt{strrev}}

With \texttt{strrev} you can create the reversed version of strings.

<<>>=
strrev('!dlroW olleH')
s
strrev(s)
@

\subsection{Multiple pattern replacement - \texttt{msub}, \texttt{mgsub}}

\texttt{msub} and \texttt{mgsub} behave like \texttt{sub} and \texttt{gsub} but
they replace multiple patterns. Replacement is done in order of the pattern
input, and multicore support is enabled by \texttt{mclapply} from the parallel
package.

<<>>=
s
msub("A", "X", s)
mgsub("A", "X", s)
@

\section{Pattern Matching}

\subsection{Get index of expression - \texttt{gregexprind}}

<<>>=
s
gregexprind("a", s, 1)
gregexprind("a", s, 2)
gregexprind("a", s, "last")
@

\subsection{Multiple pattern search - \texttt{mgrepl}}

With \texttt{mgrepl(patterns, text, ...)} you can search for more than one
regular expression, and use a logical function to combine the results for each
single expression.

<<>>=
s
mgrepl(c("a","b"), s, any)
mgrepl(c("a","b"), s, all)
@

\section{Graphical Tools}

\subsection{Create a color palette - \texttt{gghcl}}

\texttt{gghcl()} creates color palettes. It enhances the \texttt{hcl} function.
See some examples:

<<label=fig1, echo=FALSE, fig.width=3, fig.height=4, fig.align='center'>>=
par(mfrow = c(3,1), mai = c(.1,.1,.5,.1))
pts <- matrix(1:10, 10)
image(pts, col = gghcl(5), axes = F, main ="gghcl(5)")
image(pts, col = gghcl(10), axes = F, main = "gghcl(10)")
image(pts, col = gghcl(10, 1:5), axes = F, main ="gghcl(10, 1:5)")
rm(pts)
@

\section{System Tools}

\subsection{List details from and remove all objects - \texttt{lsall},
\texttt{rmall}}

With \texttt{lsall(envir, ...)} all object names, their length, class, mode and
size is returned in a data.frame from a specified environment.
\texttt{rmall(...)} removes the complete list of objects at the global
environment.

<<>>=
lsall()
rmall()
lsall()
@

\end{document}
